const { PrismaClient } = require('./apps/api/node_modules/@prisma/client');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: 'file:./apps/api/prisma/dev.db'
    }
  }
});

async function checkSeeds() {
  try {
    console.log('üîç Ê£ÄÊü•ÁßçÂ≠êÈÄâÊâãÊï∞ÊçÆ...');
    
    // Êü•ËØ¢ TournamentTeam Ë°®
    const tournamentTeams = await prisma.tournamentTeam.findMany();
    console.log(`üìä TournamentTeam ËÆ∞ÂΩïÊÄªÊï∞: ${tournamentTeams.length}`);
    
    // Êü•ÁúãÂâçÂá†Êù°ËÆ∞ÂΩï
    console.log('\nüìã Ââç5Êù° TournamentTeam ËÆ∞ÂΩï:');
    tournamentTeams.slice(0, 5).forEach((tt, index) => {
      console.log(`${index + 1}. Team ID: ${tt.teamId}, Seed: ${tt.seedNumber}, Position: ${tt.initialPosition}`);
    });
    
    // ÁªüËÆ°ÊúâÁßçÂ≠êÂè∑ÁöÑÈòü‰ºç
    const seededTeams = tournamentTeams.filter(tt => tt.seedNumber !== null);
    console.log(`\nüéØ ÊúâÁßçÂ≠êÂè∑ÁöÑÈòü‰ºç: ${seededTeams.length}`);
    
    if (seededTeams.length > 0) {
      console.log('ÁßçÂ≠êÈòü‰ºçËØ¶ÊÉÖ:');
      seededTeams.forEach(tt => {
        console.log(`  - Team ID: ${tt.teamId}, Seed: ${tt.seedNumber}`);
      });
    }
    
    // Êü•ËØ¢ÊØîËµõÊï∞ÊçÆ‰∏≠ÁöÑÈòü‰ºç‰ø°ÊÅØ
    console.log('\nüèÜ Ê£ÄÊü•ÊúÄÊñ∞ÊØîËµõ‰∏≠ÁöÑÈòü‰ºçÊï∞ÊçÆ...');
    const matches = await prisma.match.findMany({
      include: {
        teamA: true,
        teamB: true
      },
      take: 3,
      orderBy: { id: 'desc' }
    });
    
    matches.forEach((match, index) => {
      console.log(`\nÊØîËµõ ${index + 1} (ID: ${match.id}):`);
      if (match.teamA) {
        console.log(`  Team A: ${match.teamA.name} (ID: ${match.teamA.id})`);
      }
      if (match.teamB) {
        console.log(`  Team B: ${match.teamB.name} (ID: ${match.teamB.id})`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå Êü•ËØ¢Â§±Ë¥•:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkSeeds();